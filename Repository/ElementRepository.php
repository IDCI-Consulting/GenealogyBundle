<?php

namespace IDCI\GenealogyBundle\Repository;

use Doctrine\ORM\EntityRepository;

/**
 * ElementRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ElementRepository extends EntityRepository
{
    
    /**
     * find results based on request
     * 
     * @param array (request parameters)
     * @return entities
     */
    public function findEntitiesBasedOnRequest($parameters)
    {
        $q = $this->findEntitiesBasedOnRequestQuery($parameters);

        return is_null($q) ? array() : $q->getResult();
    }
    
    /**
     * find results based on request query
     *
     * @param array (request parameters)
     * @return DoctrineQuery
     */
    public function findEntitiesBasedOnRequestQuery($parameters)
    {
        $qb = $this->findEntitiesBasedOnRequestQueryBuilder($parameters);
        //var_dump($qb->getQuery()->getSQL()); die;
        return is_null($qb) ? $qb : $qb->getQuery();
    }
    
    
    /**
     * find results based on request query builder
     *
     * @param array (request parameters)
     * @return DoctrineQueryBuilder
     */
    public function findEntitiesBasedOnRequestQueryBuilder($parameters)
    {
        $qb = $this->getEntityManager()->createQueryBuilder();
        $qb->select('e')
           ->from('GenealogyBundle:Element', 'e')
        ;

        foreach($parameters as $param => $value) {
            $function = sprintf('buildQuery%s', ucfirst(strtolower($param)));

            if(method_exists($this, $function)) {
                self::$function($qb, $value, $parameters);
            }
        }

        return $qb;
    }

    /**
     * set queryBuilder based on birthdate
     *
     * @param queryBuilder qb
     * @param array value
     * @param array parameters
     */
    public static function buildQueryBirthdate(&$qb, $value, $parameters)
    {
        if(isset($parameters['operator'])) {
            if($parameters['operator'] == 'lt') {
                $qb->andWhere('e.birth_date < :birthdate')
                    ->setParameter('birthdate', $value)
                ;
            }
            else if($parameters['operator'] == 'gt') {
                $qb->andWhere('e.birth_date > :birthdate')
                    ->setParameter('birthdate', $value)
                ;
            }
            else {
                $qb->andWhere('e.birth_date = :birthdate')
                    ->setParameter('birthdate', $value)
                ;
            }
        }
        else {
            $qb->andWhere('e.birth_date = :birthdate')
                ->setParameter('birthdate', $value)
            ;
        }
    }
    
    /**
     * set queryBuilder based on sex
     *
     * @param queryBuilder qb
     * @param array value
     * @param array parameters
     */
    public static function buildQuerySex(&$qb, $value, $parameters)
    {
        if($value == 'm') {
            $qb->andWhere('e.sex = :sex')
                ->setParameter('sex', '0')
            ;
        }
        else {
            $qb->andWhere('e.sex = :sex')
                ->setParameter('sex', '1')
            ;
        }
    }
    
    /**
     * set queryBuilder based on functions
     *
     * @param queryBuilder qb
     * @param array value
     * @param array parameters
     */
    public static function buildQueryFunctions(&$qb, $value, $parameters)
    {
        $qb->leftJoin('e.roles', 'r');
        $qb->andWhere($qb->expr()->in('r.name', $value));
    }
    
}